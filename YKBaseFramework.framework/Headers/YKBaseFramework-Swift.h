// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="YKBaseFramework",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSDictionary;

@interface NSData (SWIFT_EXTENSION(YKBaseFramework))
/// 判断数据是否为gzip流数据
@property (nonatomic, readonly) BOOL isGZipCompressed;
/// gzip数据解压
///
/// returns:
/// NSData
- (NSData * _Nullable)gzipUncompress SWIFT_WARN_UNUSED_RESULT;
/// gzip数据压缩
///
/// returns:
/// NSData
- (NSData * _Nullable)gzipCompress SWIFT_WARN_UNUSED_RESULT;
/// NSData转换成NSDictionary
///
/// returns:
///
- (NSDictionary * _Nullable)toJsonDictionary SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(YKBaseFramework))
/// url编码
///
/// returns:
/// NSString
- (NSString * _Nullable)urlEncode SWIFT_WARN_UNUSED_RESULT;
/// url解码
///
/// returns:
/// NSString
- (NSString * _Nullable)urlDecode SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(YKBaseFramework))
/// 对字符串md5
///
/// returns:
/// NSString
- (NSString * _Nonnull)md5 SWIFT_WARN_UNUSED_RESULT;
/// 对字符串base64编码并转换为NSData
///
/// returns:
/// NSData
- (NSData * _Nullable)base64EncodedData SWIFT_WARN_UNUSED_RESULT;
/// 对字符串base64编码并转换为NSString
///
/// returns:
/// NSString
- (NSString * _Nullable)base64EncodedString SWIFT_WARN_UNUSED_RESULT;
/// 对字符串base64解码并转换为NSData
///
/// returns:
/// NSData
- (NSData * _Nullable)base64DecodedData SWIFT_WARN_UNUSED_RESULT;
/// 对字符串base64解码并转换为NSString
///
/// returns:
/// NSString
- (NSString * _Nullable)base64DecodedString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC15YKBaseFramework16YKBaseJsonParser")
@interface YKBaseJsonParser : NSObject
/// 错误码，为0表示没有错误
@property (nonatomic) NSInteger error;
/// 接口类型
@property (nonatomic) NSInteger type;
/// 接口信息，若出错，为出错信息
@property (nonatomic, copy) NSString * _Nonnull message;
/// 服务器时间，单位s
@property (nonatomic) NSInteger serverTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// 接口成功
@property (nonatomic, readonly) BOOL isSuccess;
/// 需要解析的Dictionary
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable souceData;
/// 需要进一步解析业务数据，可覆盖。
- (void)parseDataWithJsonData:(NSDictionary<NSString *, id> * _Nonnull)jsonData;
@end

@protocol YKConnectionItemDelegate;
@class YKNetworkError;

/// 网络请求与响应的数据类
SWIFT_CLASS("_TtC15YKBaseFramework16YKConnectionItem")
@interface YKConnectionItem : NSObject
/// 请求的类型标记
@property (nonatomic) NSInteger connectionType;
/// 请求的链接
@property (nonatomic, copy) NSString * _Null_unspecified requestURL;
/// 请求post数据，如果为空，按get请求
@property (nonatomic, copy) NSData * _Nullable postData;
/// 网络请求的回调
@property (nonatomic, weak) id <YKConnectionItemDelegate> _Nullable delegate;
/// 网络请求的回调
@property (nonatomic, copy) void (^ _Nullable block)(YKConnectionItem * _Nonnull, YKNetworkError * _Nullable);
/// 网络请求返回的数据
@property (nonatomic, copy) NSData * _Nullable responseData;
/// 网络请求返回的错误，为空时，则无错误。非空时，表示出错。
@property (nonatomic, strong) YKNetworkError * _Nullable networkError;
/// 在请求时设置回传参数，可在网络响应后获取该参数
@property (nonatomic, strong) id _Nullable contextObject;
/// 设置YKConnectionItem基本信息
/// \param requestURL 请求url
///
/// \param postData 主体数据
///
/// \param connectionType 类型，用来区分不同的网络请求。
///
- (void)setConnectionItemInfoWithRequestURL:(NSString * _Null_unspecified)requestURL postData:(NSData * _Nullable)postData connectionType:(NSInteger)connectionType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 网络请求的回调
SWIFT_PROTOCOL("_TtP15YKBaseFramework24YKConnectionItemDelegate_")
@protocol YKConnectionItemDelegate
/// 网络请求的回调
/// \param connectionItem 请求的connectionItem
///
/// \param networkError 网络响应错误，为空，表示正常。非空，表示请求出错
///
///
/// returns:
/// Void
- (void)notifyConnectionItem:(YKConnectionItem * _Nonnull)connectionItem networkError:(YKNetworkError * _Nullable)networkError;
@optional
/// 请求被取消
/// \param connectionItem 请求的connectionItem
///
///
/// returns:
/// Void
- (void)notifyConnectionItemRequestCanceled:(YKConnectionItem * _Nonnull)connectionItem;
@end

enum YKDeviceScreenSizeType : NSInteger;

SWIFT_CLASS("_TtC15YKBaseFramework8YKDevice")
@interface YKDevice : NSObject
/// 设备的uuid
+ (NSString * _Nonnull)deviceUUID SWIFT_WARN_UNUSED_RESULT;
/// 获取机型
+ (NSString * _Nonnull)deviceModel SWIFT_WARN_UNUSED_RESULT;
/// 设备名称
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
/// 系统版本号
+ (NSString * _Nonnull)systemVersion SWIFT_WARN_UNUSED_RESULT;
/// idfa串
+ (NSString * _Nonnull)idfaString SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕逻辑尺寸
+ (CGSize)screenSize SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕尺寸类型
+ (enum YKDeviceScreenSizeType)deviceScreenSizeType SWIFT_WARN_UNUSED_RESULT;
/// 水平方向的缩放比例，以6，7，8屏幕为基准。
+ (CGFloat)horUIScale SWIFT_WARN_UNUSED_RESULT;
/// 垂直方向的缩放比例，以6，7，8屏幕为基准。
+ (CGFloat)verUIScale SWIFT_WARN_UNUSED_RESULT;
/// 单像素在不同scale下的逻辑尺寸。
+ (CGFloat)uiScaleForSinglePx SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕的逻辑尺寸宽度。
+ (CGFloat)screenWidth SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕的逻辑尺寸高度。
+ (CGFloat)screenHeight SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// 设备屏幕尺寸类型
typedef SWIFT_ENUM(NSInteger, YKDeviceScreenSizeType) {
  YKDeviceScreenSizeTypeNone = 0,
/// 4s设备的屏幕分辨率
  YKDeviceScreenSizeTypeIPhone4S = 1,
/// 5S设备的屏幕分辨率
  YKDeviceScreenSizeTypeIPhone5S = 2,
/// 6设备的屏幕分辨率
  YKDeviceScreenSizeTypeIPhone6 = 3,
/// 6Plus设备的屏幕分辨率
  YKDeviceScreenSizeTypeIPhone6Plus = 4,
/// X设备的屏幕分辨率
  YKDeviceScreenSizeTypeIPhoneX = 5,
};

@class UIColor;
@class UIImage;

SWIFT_CLASS("_TtC15YKBaseFramework7YKImage")
@interface YKImage : NSObject
/// 通过字体颜色生成图片
/// \param color 字体颜色
///
///
/// returns:
/// UIImage
+ (UIImage * _Nullable)loadImageWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// 加载webp图片
/// \param imageName 图片名
///
///
/// returns:
/// UIImage
+ (UIImage * _Nullable)loadWebPImageWithImageName:(NSString * _Nonnull)imageName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15YKBaseFramework9YKNetwork")
@interface YKNetwork : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 添加去重的网络请求
/// \param connectionItem YKConnectionItem
///
- (void)addConnectionItemWithConnectionItem:(YKConnectionItem * _Nonnull)connectionItem;
/// 添加并发的网络请求，不去重
/// \param connectionItem YKConnectionItem
///
- (void)addConcurrentConnectionItemWithConnectionItem:(YKConnectionItem * _Nonnull)connectionItem;
/// 取消网络请求
/// \param connectionItem YKConnectionItem
///
- (void)cancelConnectionItemWithConnectionItem:(YKConnectionItem * _Nonnull)connectionItem;
/// 取消所有网络请求
/// \param connectionItem YKConnectionItem
///
- (void)cancelAllConnectionItems;
/// 取消所有网络请求
/// \param YKConnectionItemDelegate 回调的对象
///
- (void)removeConnectionItemWithDelegate:(id <YKConnectionItemDelegate> _Nonnull)delegate;
@end


SWIFT_CLASS("_TtC15YKBaseFramework15YKNetworkCommon")
@interface YKNetworkCommon : NSObject
/// 刷新网络活动指示器
+ (void)updateNetworkActivityIndicator;
/// 开启网络活动指示器
+ (void)networkActivityIndicatorStarted;
/// 关闭网络活动指示器
+ (void)networkActivityIndicatorStop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum YKNetworkErrorType : NSInteger;

SWIFT_CLASS("_TtC15YKBaseFramework14YKNetworkError")
@interface YKNetworkError : NSObject
/// 错误码类型，见YKNetworkErrorType定义，默认为noneError
@property (nonatomic) enum YKNetworkErrorType errorCodeType;
/// 错误信息
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// 是否是网络出错
@property (nonatomic, readonly) BOOL isNetError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, YKNetworkErrorType) {
/// 无错误
  YKNetworkErrorTypeNoneError = 0,
/// 网络错误
  YKNetworkErrorTypeNetError = 1,
/// 服务端错误
  YKNetworkErrorTypeServerError = 2,
/// 客户端请求错误
  YKNetworkErrorTypeClientError = 3,
/// 客户端请求取消
  YKNetworkErrorTypeRequestCanceled = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
